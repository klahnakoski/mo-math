{
    "author": "Kyle Lahnakoski",
    "author_email": "kyle@lahnakoski.com",
    "classifiers": [
        "Development Status :: 4 - Beta",
        "Topic :: Software Development :: Libraries",
        "Topic :: Software Development :: Libraries :: Python Modules",
        "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)"
    ],
    "description": "More Math! Many of the aggregates you are familiar with, but they ignore Nones",
    "include_package_data": true,
    "install_requires": ["mo-dots>=2.20.18318", "mo-future", "mo-logs>=2.26.18331"],
    "license": "MPL 2.0",
    "long_description": "\n# More Math!  \n\nBasic math functions that have been stabilized to act well over `Null`\n\n## Overview\n\nMany of the basic math functions you know and love, with the additional benefit \nthat they do not throw exceptions and do not return `NaN`. Rather, all function \nreturn `Null` in the exceptional case.\n\nThese functions are all class methods. Be sure you call the functions \nwith `Math.` prefix, like \n\n\tMath.abs(-42)\n\nThis prevents confusion with the built-in functions by the same name   \n\n\n## Functions\n\nMost functions need no introduction, so are not listed here. Some of the interesting ones are:\n\n- `Math.round(value, decimal=7, digits=None)` - Rounds to 7decimal points, unless specified differently.  Rounding to `decimal=0` will return an `int`. The useful parameter here is `digits`, which rounds to a specified number of significant digits.\n- `Math.floor(value, mod=1)` - The `mod`ulo parameter is used to specify the granularity of the floor function.\n- `Math.ceiling(value, mod=1)` - Return the smallest value, that's larger than `value`, with suitable granularity.\n- `Math.mod(value, mod=1)` - Works on floats\n- `Math.approx_str(value)` - Round values, and return unicode \n- `Math.sign(v)` - Missing from the Python library \n\n\nThe all-caps aggregate functions accept only one parameter; an iterable. Null \nvalues are ignored. If all values are Null, the function returns Null.\n\n- `COUNT(values)`\n- `SUM(values)` \n- `PRODUCT(values)` \n- `MIN(values)` \n- `MAX(values)` \n\n",
    "long_description_content_type": "text/markdown",
    "name": "mo-math",
    "packages": [
        "mo_math/vendor/aespython", "mo_math/vendor/strangman",
                  "mo_math/vendor",                  "mo_math"
    ],
    "url": "https://github.com/klahnakoski/mo-math",
    "version": "2.26.18331"
}